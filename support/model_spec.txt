Models

Adventure -- what data needs to be carried across the whole thing
	has_many Stage

	css
		text
		Adventure-level CSS, will be applied to each page
	set
		text
		initial state, see state_spec
	verify
		text
		only_if that tells what the state is allowed to be like at the end
	title
		string
		self-evident
	description
		text
		Actually a description, for index purposes.

Stage -- what data is needed to show one page
	belongs_to Adventure
	has_many picks
	has_one stagelayout

	title
		string
		self-evident
	adventure_id
		integer
		Does ruby automatically do this for me?
	stagelayout_id
		integer
		^^
	order
		integer
		what order the stage should be shown in, 1 first, 0 never
	content
		text
		defines pick vars to be stuck in the layout


Pick -- what individual choices can be made
	belongs_to Stage
	has_one picklayout

	Pick
		string
		Name should be used for identification in a stagelayout
	title
		string
		Human-readable title, for indexing / ID purposes. CoC assigned to $title (which can be overridden)
	content
		text
		defines variables that go into picklayout. See layout_spec
	only_if
		text
		determines special conditions that must be met for a pick to be chosen. See state_spec
	sets
		text
		Tells how vars should react to this pick being chosen / unchosen. See state_spec
	picklayout_id
		integer
		self-evident


Picklayout -- how a pick should be laid out
	belongs_to pick

	html
		text
		Defines a pick. See layout_spec

Stagelayout -- how a stage should be laid out
	belongs_to stage

	html
		text
		Defines a stage. See layout_spec
